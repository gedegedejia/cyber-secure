a = float(input())
b = float(input())
print(f"{a} + {b} = {a + b:.3f}")
print(f"{a} - {b} = {a - b:.3f}")
print(f"{a} * {b} = {a * b:.3f}")
print(f"{a} / {b} = {a / b:.3f}")

a = int(input('请输入一个整数：'))
b = int(input('请再输入一个整数：'))
sign = input('请输入运算符号')

# eval()函数把字符串f"{a}{sign}{b}"转为计算表达式
# 字符串里包含引号时，内部引号与边界应用不同的引号
print(f'{a}{sign}{b}={eval(f"{a}{sign}{b}")}')


radius, height = map(float, input().split())
列表 替换 ls[i] = a  ls[1:3] =[33,44]   1. 列表加入ls.append(x)ls为操作的列表名，x为增加的元素。
2.extend()是将另一个列表中的所有元素追加到当前列表的末尾
3.extend()是将另一个列表中的所有元素追加到当前列表的末尾
列表删除 1.  list.pop()删最后一个list.pop（n）删除第n位
             2. list.remove(x)x为要删除的数据。不可删除不在列表中
              3.ls. clear()方法可用于删除列表中全部元素，即清空列表。del L[:]
列表排序（1）sort()方法

ls.sort(*, key=None, reverse=False)     ls.sort()方法可以对列表ls中的数据在原地进行排序ls.sort()方法可以对列表ls中的数据在原地进行排序
reverse=False，为升序排序；当设置参数reverse=True时，为降序排序    参数key可以指定排序时应用的规则，不影响列表中元素的值。如按大小写长度

reverse()方法
 ls.reverse()方法的作用是不比较元素大小，直接将列表ls中的元素逆序。


def read_txt(file):
    """接收文件名为参数，读取文件中的内容为一个字符串，返回这个字符串。"""
    with open(file, 'r') as temp:
        return temp.read()


import matplotlib.pyplot as plt

# 支持中文显示
plt.rcParams['font.sans-serif'] = ['SimSun']    # 宋体
plt.rcParams['axes.unicode_minus'] = False      # 正常显示负号 -

def plot_dos(ls):
    """接受二维列表为参数，绘制曲线，无返回值。"""
    x = [float(x[0]) for x in ls]
    y = [float(x[1]) for x in ls]
    plt.plot(x, y, linestyle='-', linewidth=1)  # 绘制数据曲线


def draw_label():
    """增加图名和轴标签"""
    plt.title('态密度（Density of States）曲线')
    plt.xlabel('能量/eV')
    plt.ylabel('态密度/eV')


def zoom_area():
    """只显示横坐标在-5到5之间的区域，局部放大，纵坐标根据曲线的最大值来设定为-0.5到8"""
    plt.xlim(-5, 5)                         # 设置x轴的上下限，获得区域放大的曲线
    plt.ylim(-0.5, 8)                       # 设置y轴的上下限，获得区域放大的曲线